;**************************************************************************
; SBM 2019. PRACTICA 4 - ANA ROA, DAVID PALOMO. PAREJA 10.
;**************************************************************************
CODIGO SEGMENT
ASSUME CS:CODIGO
ORG 256

;**************************************************************************
; PROCEDIMIENTO PRINCIPAL. INSTALA, DESINSTALA O MUESTRA INFORMACION
; DEPENDIENDO DE LOS PARAMETROS INTRODUCIDOS AL INVOCAR EL PROGRAMA
;**************************************************************************
MAIN:
	MOV SI, 80H
	MOV BH, [SI]
	CMP BH, 0
	JE MOSTRAR_INFO
	CMP BH, 3
	JNE ERROR_ENTRADA
	MOV BH, [SI+2]
	CMP BH, "/"
	JNE ERROR_ENTRADA
	MOV BH, [SI+3]
	CMP BH, "D"
	JNE COMPARAR_I
	CALL DESINSTALADOR
	JMP ERROR_NORMAL
COMPARAR_I:
	CMP BH, "I"
	JNE ERROR_ENTRADA
	CALL INSTALADOR
	JMP ERROR_NORMAL
ERROR_ENTRADA:
	MOV AH, 2
	MOV DL, 10
	INT 21H
ERROR_NORMAL:
	MOV AH, 9
	MOV DX, OFFSET ERROR_MSG
	INT 21H
	JMP FIN_MAIN
MOSTRAR_INFO:
	MOV AH, 9
	MOV DX, OFFSET INFO_MSG1
	INT 21H
	CALL ESTADO
	MOV AH, 9
	MOV DX, OFFSET INFO_MSG2
	INT 21H
FIN_MAIN:
	MOV AX, 4C00H
	INT 21H

;**************************************************************************
; VARIABLES GLOBALES PARA IMPRESION POR PANTALLA
;**************************************************************************
ERROR_MSG	DB	"  PARECE QUE COMETISTE UN ERROR", 10, "$"
INST_MSG	DB	"  INSTALANDO LA RUTINA", 10, "$"
DES_MSG 	DB	"  DESINSTALANDO LA RUTINA", 10, "$"
EST_LIBRE	DB	"  NO HAY NADA INSTALADO", 10, 13, "$"
EST_OCUP	DB	"  HAY UNA RUTINA INSTALADA", 10, 13, "$"
INFO_MSG1	DB	1BH,"[2","J", 10, 13, "  - ESTADO DE INSTALACION:", "$"
INFO_MSG2	DB	"  - PAREJA 10: ANA ROA, DAVID PALOMO.", 10, 10, 13
        	DB	"  - INSTRUCCIONES DE USO:", 10, 13
        	DB	9, "PRACT4A.COM: ", 9, " MUESTRA INFORMACION", 10, 13
        	DB	9, "PRACT4A.COM /D:", 9," DESINSTALA LA RUTINA", 10, 13
        	DB	9, "PRACT4A.COM /I:",9," INSTALA LA RUTINA", 10, 13
        	DB	"  - UNA VEZ INSTALADA, EJECUTA PRACT4B.EXE O PRACT4C.EXE"
        	DB	10, 13, "$"

;**************************************************************************
; RECIBE EL OFFSET DE CADENA DE ENTRADA EN "DX", EL OFFSET DE LA DE SALIDA
; EN "BX" Y LA OPCION EN "AH" (CODIFICA SI AH=10H, DECODIFICA SI AH=11H)
;**************************************************************************
RSI PROC FAR
	MOV SI, DX
	MOV DI, BX

	CMP AH, 10H
	JNE CHECK_IF_11
	CALL ENCODE        ;SI AH=10H, CODIFICA
	JMP FIN_RSI
CHECK_IF_11:
	CMP AH, 11H        ;SI AH=11H, DECODIFICA
	JNE FIN_RSI
	CALL DECODE
FIN_RSI: IRET
RSI ENDP

;**************************************************************************
; RECIBE EN "SI" EL OFFSET DE UNA CADENA EN TEXTO PLANO.
; LA CODIFICA Y LA ALMACENA EN UNA CADENA DE OFFSET "BX"
;**************************************************************************
ENCODE PROC
BUCLE_ENCODE:          ;PARA CADA CARACTER (AL) DE LA CADENA
	XOR AH, AH
	MOV AL, [SI]
	CMP AL, "$"
	JE FIN_ENCODE
		CMP AL, "0"    ;SI AL="0", ALMACENA "66"
		JNE NOT_ZERO
		MOV AX, 3636H
		JMP ALMACENAR
	NOT_ZERO:
		CMP AL, "9"
		JG LETRAS      ;SI AL>"9", ES LETRA
		JMP NUMEROS    ;SI NO, ES NUMERO
	LETRAS:
		CMP AL, "Z"
		JG FIN_ENCODE
		SUB AL, "A"-9  ;LETRAS: AL = AL - "A" - OFFSET_A(9)
		JMP DIVIDIR
	NUMEROS:
		CMP AL, "1"
		JL FIN_ENCODE
		SUB AL, "1"    ;NUMEROS: AL = AL - "1" - OFFSET_1(0)
	DIVIDIR:
		MOV CL, 6
		DIV CL
		ADD AH, 49     ;COLUMNA: AL/6 + 1
		ADD AL, 49     ;FILA: AL%6 + 1
	ALMACENAR:
		MOV [BX], AL
		MOV [BX+1], AH
	INC SI
	ADD BX, 2
	JMP BUCLE_ENCODE
FIN_ENCODE:
	MOV AL, "$"
	MOV [BX], AL
	RET
ENCODE ENDP

;**************************************************************************
; RECIBE EN "SI" EL OFFSET DE UNA CADENA CODIFICADA EN POLIBIO.
; LA DECODIFICA Y LA ALMACENA EN UNA CADENA DE OFFSET "BX"
;**************************************************************************
DECODE PROC
BUCLE_DECODE:          ;PARA CADA NUM DE 2 DIGITOS ASCII (AH:AL)
	MOV AH, [SI]
	MOV AL, [SI+1]
		CMP AH, "$"    ;SI AH="$", TERMINA
		JE FIN_DECODE
		CMP AH, "6"    ;SI NUM ESTA FUERA DE RANGO, TERMINA
		JG FIN_DECODE
		CMP AL, "6"
		JG FIN_DECODE
		CMP AH, "1"
		JL FIN_DECODE
		CMP AL, "1"
		JL FIN_DECODE
		CMP AX, 3636H   ;SI AH="6" Y AL="6", ALMACENAR "0"
		JNE NO_ES_CERO
		MOV AL, "0"
		JMP ALMACENAR2
	NO_ES_CERO:
		CMP AH, "1"    ;SI AH="1", ES NUM DE FILA1: ALMACENAR AL
		JNE NO_ES_UNO
		JMP ALMACENAR2
	NO_ES_UNO:
		CMP AH, "2"
		JG LETRAS2     ;SI AH>"2", ES LETRA
		CMP AL, "3"
		JG LETRAS2     ;SI AH="2" y AL>"3", ES LETRA
		ADD AL, 6      ;SI NO, ES NUM DE LA FILA2: ALMACENAR AL+6
		JMP ALMACENAR2
	LETRAS2:
		SUB AH, 48
		SUB AL, 48
		MOV DH, AL
		MOV AL, AH
		MOV CL, 6
		MUL CL
		ADD AL, DH
		ADD AL, 49     ;AL = AH*6 + AL + 49
	ALMACENAR2:
		MOV [BX], AL
	ADD SI, 2
	INC BX
	JMP BUCLE_DECODE
FIN_DECODE:
	MOV AL, "$"
	MOV [BX], AL
	RET
DECODE ENDP

;**************************************************************************
; CUANDO HA PASADO UN SEGUNDO (SI=18), IMPRIME "CL" CARACTERES DE LA
; CADENA DE OFFSET "DI" SEPARADOS POR EL CARACTER "DH"
;**************************************************************************
IMPRIMIR PROC FAR
	INC SI           ;INCREMENTA UN CONTADOR (SI)
	CMP SI, 18       ;MIENTRAS QUE EL CONTADOR NO SEA 18,
	JL FIN_IMPRIMIR  ;SE VOLVERA A LLAMAR A FUNCION
	MOV CH, CL       ;GUARDAR CL (SE VA A DECREMENTAR)

	BUCLE_IMPRIMIR:
		XOR SI, SI       ;CUANDO HA PASADO UN SEGUNDO
		MOV DL, [DI]     ;OBTIENE CARACTER A IMPRIMIR
		CMP DL, "$"      ;SI ES EL FIN DE CADENA,
		JE STOPIT        ;DEJAR DE IMPRIMIR
		MOV AH, 2
		INT 21H          ;IMPRIME EL CARACTER
		INC DI           ;MIRAR AL SIGUIENTE CARACTER
		DEC CL
		JNZ BUCLE_IMPRIMIR

	MOV CL, CH       ;RECUPERAR CL INICIAL
	TEST DH, DH
	JZ FIN_IMPRIMIR  ;SI SEPARADOR=0, NO LO IMPRIME
	MOV DL, DH
	MOV AH, 2
	INT 21H          ;IMPRIME EL SEPARADOR
	JMP FIN_IMPRIMIR
STOPIT:
	INC BL           ;AVISA DE QUE HA TERMINADO
	in al, 21H
	OR al, 00000001B ;DESHABILITA TIMER
	out 21H ,al
FIN_IMPRIMIR: IRET
IMPRIMIR ENDP

;**************************************************************************
; INSTALA "RSI" (Y FUNCIONES AUXILIARES) EN LA INT 57H (CON FIRMA BABE)
; Y LA RUTINA "IMPRIMIR" EN LA INT 1CH
;**************************************************************************
INSTALADOR PROC
	MOV BX, 57H
	MOV AH, 2
	MOV DL, 10
	INT 21H
	CALL ESTADO
	CMP AX, 1
	JE FIN_INST ;SI YA HAY ALGO INSTALADO, TERMINA
	XOR AX, AX
	MOV ES, AX
	MOV AX, OFFSET RSI
	MOV BX, CS
	CLI
	MOV ES:[57H*4-2], 0BABEH
	MOV ES:[57H*4], AX
	MOV ES:[57H*4+2], BX
	STI
	MOV AH, 9
	MOV DX, OFFSET INST_MSG
	INT 21H

	XOR SI, SI
	in al, 21H
	or al, 00000001B ;DESHABILITA TIMER
	out 21H ,al
	MOV AX, OFFSET IMPRIMIR
	MOV ES:[1CH*4-2], 0BABEH
	MOV ES:[1CH*4], AX
	MOV ES:[1CH*4+2], BX

	;ACABA Y DEJA RESIDENTE PSP, VARIABLES Y RUTINAS
	MOV DX, OFFSET INSTALADOR
	INT 27H
FIN_INST: RET
INSTALADOR ENDP

;**************************************************************************
; DESINSTALA LA RSI (Y FUNCIONES AUXILIARES) DE LA INT 57H
;**************************************************************************
DESINSTALADOR PROC
	MOV BX, 57H
	MOV AH, 2
	MOV DL, 10
	INT 21H
	CALL ESTADO
	CMP AX, 0
	JE FIN_DESINST       ;SI NO HAY NADA INSTALADO, TERMINA

	XOR CX, CX
	MOV DI, DS
	MOV DS, CX           ;SEGMENTO DE VECTORES INTERRUPCIÃ“N
	MOV ES, DS:[57H*4+2] ;LEE SEGMENTO DE RSI
	MOV BX, ES:[2CH]     ;LEE SEGMENTO DE ENTORNO DEL PSP DE RSI
	MOV AH, 49H
	INT 21H              ;LIBERA SEGMENTO DE RSI (ES)
	MOV ES, BX
	INT 21H              ;LIBERA SEGMENTO DE VARIABLES DE ENTORNO DE RSI
	                     ; PONE A CERO VECTOR DE INTERRUPCION 57H
	CLI
	MOV DS:[57H*4-2], CX ;BORRAR FIRMA
	MOV DS:[57H*4], CX   ;CX = 0
	MOV DS:[57H*4+2], CX
	STI
	MOV DS, DI
	MOV AH, 9
	MOV DX, OFFSET DES_MSG
	INT 21H

	MOV AX, 4C00H
	INT 21H
FIN_DESINST: RET
DESINSTALADOR ENDP

;**************************************************************************
; MUESTRA SI EL VECTOR DE INT 57H ESTA FIRMADO POR BABE (AX=1) O NO (AX=0)
;**************************************************************************
ESTADO PROC
	XOR AX, AX
	MOV ES, AX
	MOV AX, ES:[57H*4-2]
	CMP AX, 0BABEH
	JE FIRMADO
	MOV AH, 9
	MOV DX, OFFSET EST_LIBRE
	INT 21H
	XOR AX, AX
	RET
FIRMADO:
	MOV AH, 9
	MOV DX, OFFSET EST_OCUP
	INT 21H
	MOV AX, 1
	RET
ESTADO ENDP

CODIGO ENDS
END MAIN
